{"version":3,"sources":["components/Todo.js","components/TodoList.js","model.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","todo","removeTodo","useStoreActions","action","markComplete","className","style","backgroundColor","done","textDecoration","text","onClick","id","icon","faCheck","faTrashAlt","TodoList","todos","useStoreState","state","addTodoToStore","addTodo","type","placeholder","onKeyDown","e","which","uuidv4","target","value","map","item","key","todoToDel","find","index","indexOf","splice","push","el","store","createStore","model","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAMe,SAASA,EAAKC,GACzB,IAAMC,EAAOD,EAAMC,KACbC,EAAaC,aAAgB,SAAAC,GAAM,OAAIA,EAAOF,cAC9CG,EAAeF,aAAgB,SAAAC,GAAM,OAAIA,EAAOC,gBAGtD,OACI,yBAAKC,UAAU,OAAOC,MAAO,CACzBC,gBAAiBP,EAAKQ,KAAO,UAAW,YAExC,yBAAKH,UAAU,OAAOC,MAAO,CACzBG,eAAgBT,EAAKQ,KAAO,eAAiB,SAE5CR,EAAKU,MAEV,yBAAKL,UAAU,YACX,yBAAKA,UAAU,eAAeM,QAAS,kBAXlCC,EAW+CZ,EAAKY,GAX9CR,EAAaQ,GAAnB,IAAAA,IAWyD,kBAAC,IAAD,CAAiBC,KAAMC,OACrF,yBAAKT,UAAU,SAASM,QAAS,kBAb1BC,EAayCZ,EAAKY,GAbxCX,EAAWW,GAAjB,IAAAA,IAamD,kBAAC,IAAD,CAAiBC,KAAME,S,YCjBlF,SAASC,IACpB,IAAMC,EAAQC,aAAc,SAAAC,GAAK,OAAIA,EAAMF,SACrCG,EAAiBlB,aAAgB,SAAAC,GAAM,OAAIA,EAAOkB,WAaxD,OACI,yBAAKhB,UAAU,YACX,yBAAKA,UAAU,aACX,2BAAOiB,KAAK,OAAOC,YAAY,yBAAyBC,UAfnD,SAACC,GACd,GAAe,IAAXA,EAAEC,MAAa,CACf,IAAM1B,EAAO,CACTY,GAAIe,cACJjB,KAAMe,EAAEG,OAAOC,MACfrB,MAAM,GAEVY,EAAepB,GACfyB,EAAEG,OAAOC,MAAQ,QASjB,yBAAKxB,UAAU,QACVY,EAAMa,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAKnB,GAAIZ,KAAM+B,SCzB9C,OACXd,MAAO,GAGPhB,WAAYE,aAAO,SAACgB,EAAOP,GACvB,IAAMqB,EAAYd,EAAMF,MAAMiB,MAAK,SAAAlC,GAAI,OAAIA,EAAKY,IAAMA,KAChDuB,EAAQhB,EAAMF,MAAMmB,QAAQH,GAClCd,EAAMF,MAAMoB,OAAOF,EAAO,MAE9Bd,QAASlB,aAAO,SAACgB,EAAOnB,GACpBmB,EAAMF,MAAMqB,KAAKtC,MAErBI,aAAcD,aAAO,SAACgB,EAAOP,GACzB,IAAM2B,EAAKpB,EAAMF,MAAMiB,MAAK,SAAAlC,GAAI,OAAIA,EAAKY,IAAMA,KACzCuB,EAAQhB,EAAMF,MAAMmB,QAAQG,GAClCpB,EAAMF,MAAMkB,GAAO3B,MAAQW,EAAMF,MAAMkB,GAAO3B,SCXhDgC,EAAQC,YAAYC,GAeXC,MAbf,WACE,OACE,kBAAC,IAAD,CAAeH,MAAOA,GACtB,yBAAKnC,UAAU,OACb,yBAAKA,UAAU,cAAf,SAGA,kBAAC,EAAD,SCHcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.59e682f0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Todo.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nexport default function Todo(props) {\r\n    const todo = props.todo;\r\n    const removeTodo = useStoreActions(action => action.removeTodo);\r\n    const markComplete = useStoreActions(action => action.markComplete);\r\n    const deleteTodo = id => removeTodo(id);\r\n    const markDone = id => markComplete(id);\r\n    return (\r\n        <div className=\"todo\" style={{\r\n            backgroundColor: todo.done ? '#e63946' :'#a8dadc'\r\n        }}>\r\n            <div className=\"desc\" style={{\r\n                textDecoration: todo.done ? 'line-through' : 'none'\r\n            }}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"controls\">\r\n                <div className=\"markComplete\" onClick={()=>markDone(todo.id)}><FontAwesomeIcon icon={faCheck} /></div>\r\n                <div className=\"delete\" onClick={()=>deleteTodo(todo.id)}><FontAwesomeIcon icon={faTrashAlt} /></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './TodoList.css'\r\nimport Todo from './Todo'\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default function TodoList() {\r\n    const todos = useStoreState(state => state.todos);\r\n    const addTodoToStore = useStoreActions(action => action.addTodo);\r\n    const addTodo = ((e) => {\r\n        if (e.which == 13) {\r\n            const todo = {\r\n                id: uuidv4(),\r\n                text: e.target.value,\r\n                done: false\r\n            }\r\n            addTodoToStore(todo);\r\n            e.target.value = ''\r\n        }\r\n    });\r\n    \r\n    return (\r\n        <div className=\"todolist\">\r\n            <div className=\"inputTodo\">\r\n                <input type=\"text\" placeholder=\"What needs to be done?\" onKeyDown={addTodo}></input>\r\n            </div>\r\n            <div className=\"list\">\r\n                {todos.map(item => <Todo key={item.id} todo={item}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { action } from 'easy-peasy';\r\n\r\nexport default {\r\n    todos: [\r\n        \r\n    ],\r\n    removeTodo: action((state, id) => {\r\n        const todoToDel = state.todos.find(todo => todo.id == id);\r\n        const index = state.todos.indexOf(todoToDel);\r\n        state.todos.splice(index, 1);\r\n    }),\r\n    addTodo: action((state, todo) => {\r\n        state.todos.push(todo);\r\n    }),\r\n    markComplete: action((state, id) => {\r\n        const el = state.todos.find(todo => todo.id == id);\r\n        const index = state.todos.indexOf(el);\r\n        state.todos[index].done = !state.todos[index].done;\r\n    })\r\n}","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport { StoreProvider, createStore } from 'easy-peasy';\nimport model from './model';\n\nconst store = createStore(model);\n\nfunction App() {\n  return (\n    <StoreProvider store={store}>\n    <div className=\"App\">\n      <div className=\"todoheader\">\n                todos\n            </div>\n      <TodoList />\n      </div>\n      </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}