{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","StickyStateHook.js","serviceWorker.js","index.js"],"names":["Todo","props","todo","todoOperations","className","style","backgroundColor","done","textDecoration","text","onClick","markDone","id","icon","faCheck","deleteTodo","faTrashAlt","TodoList","todos","type","placeholder","onKeyDown","addTodo","map","item","key","App","defaultValue","React","useState","stickyValue","window","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","useStickyState","setTodos","e","which","newTodo","uuidv4","target","newTodoList","todoToDel","find","index","indexOf","splice","el","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAKe,SAASA,EAAKC,GAAQ,IAC1BC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,eACb,OACI,yBAAKC,UAAU,OAAOC,MAAO,CACzBC,gBAAiBJ,EAAKK,KAAO,UAAW,YAExC,yBAAKH,UAAU,OAAOC,MAAO,CACzBG,eAAgBN,EAAKK,KAAO,eAAiB,SAE5CL,EAAKO,MAEV,yBAAKL,UAAU,YACX,yBAAKA,UAAU,eAAeM,QAAS,kBAAIP,EAAeQ,SAAST,EAAKU,MAAK,kBAAC,IAAD,CAAiBC,KAAMC,OACpG,yBAAKV,UAAU,SAASM,QAAS,kBAAIP,EAAeY,WAAWb,EAAKU,MAAK,kBAAC,IAAD,CAAiBC,KAAMG,SCdjG,SAASC,EAAShB,GAAQ,IAC7BE,EAA0BF,EAA1BE,eAAgBe,EAAUjB,EAAViB,MAExB,OACI,yBAAKd,UAAU,YACX,yBAAKA,UAAU,aACX,2BAAOe,KAAK,OAAOC,YAAY,yBAAyBC,UAAWlB,EAAemB,WAEtF,yBAAKlB,UAAU,QACVc,EAAMK,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAKZ,GAAIV,KAAMsB,EAAMrB,eAAgBA,S,YCiCpEuB,MAxCf,WAAgB,IAAD,ECJA,SAAyBC,EAAcF,GAAM,IAAD,EACzBG,IAAMC,UAAS,WACrC,IAAMC,EAAcC,OAAOC,aAAaC,QAAQR,GAChD,OAAuB,OAAhBK,EACDI,KAAKC,MAAML,GACXH,KALyC,mBAC5CS,EAD4C,KACrCC,EADqC,KAUnD,OAHAT,IAAMU,WAAU,WACZP,OAAOC,aAAaO,QAAQd,EAAKS,KAAKM,UAAUJ,MACjD,CAACX,EAAKW,IACF,CAACA,EAAOC,GDLKI,CAAe,GAAI,cADhC,mBACNvB,EADM,KACCwB,EADD,KAEPvC,EAAiB,CACrBmB,QAAU,SAACqB,GACT,GAAgB,KAAZA,EAAEC,MAAc,CAClB,IAAMC,EAAU,CACdjC,GAAIkC,cACJrC,KAAMkC,EAAEI,OAAOX,MACf7B,MAAM,GAERmC,EAAS,GAAD,mBAAKxB,GAAL,CAAY2B,KAEpBF,EAAEI,OAAOX,MAAQ,KAGrBrB,WAAa,SAAAH,GACX,IAAMoC,EAAW,YAAO9B,GAClB+B,EAAYD,EAAYE,MAAK,SAAAhD,GAAI,OAAIA,EAAKU,KAAOA,KACjDuC,EAAQH,EAAYI,QAAQH,GAClCD,EAAYK,OAAOF,EAAO,GAC1BT,EAASM,IAEXrC,SAAU,SAAAC,GACR,IAAMoC,EAAW,YAAO9B,GAClBoC,EAAKN,EAAYE,MAAK,SAAAhD,GAAI,OAAIA,EAAKU,IAAMA,KACzCuC,EAAQH,EAAYI,QAAQE,GAClCN,EAAYG,GAAO5C,MAAQyC,EAAYG,GAAO5C,KAC9CmC,EAASM,KAGb,OACE,yBAAK5C,UAAU,OACb,yBAAKA,UAAU,cAAf,SAGA,kBAAC,EAAD,CAAUD,eAAgBA,EAAgBe,MAAOA,ME7BnCqC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7767a629.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Todo.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default function Todo(props) {\r\n    const {todo, todoOperations } = props;\r\n    return (\r\n        <div className=\"todo\" style={{\r\n            backgroundColor: todo.done ? '#e63946' :'#a8dadc'\r\n        }}>\r\n            <div className=\"desc\" style={{\r\n                textDecoration: todo.done ? 'line-through' : 'none'\r\n            }}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"controls\">\r\n                <div className=\"markComplete\" onClick={()=>todoOperations.markDone(todo.id)}><FontAwesomeIcon icon={faCheck} /></div>\r\n                <div className=\"delete\" onClick={()=>todoOperations.deleteTodo(todo.id)}><FontAwesomeIcon icon={faTrashAlt} /></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './TodoList.css'\r\nimport Todo from './Todo'\r\n\r\nexport default function TodoList(props) {\r\n    const { todoOperations, todos } = props;\r\n\r\n    return (\r\n        <div className=\"todolist\">\r\n            <div className=\"inputTodo\">\r\n                <input type=\"text\" placeholder=\"What needs to be done?\" onKeyDown={todoOperations.addTodo}></input>\r\n            </div>\r\n            <div className=\"list\">\r\n                {todos.map(item => <Todo key={item.id} todo={item} todoOperations={todoOperations}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport useStickyState from './StickyStateHook.js'\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction App() {\n  const [todos, setTodos] = useStickyState([], \"localState\");\n  const todoOperations = {\n    addTodo: ((e) => {\n      if (e.which === 13) {\n        const newTodo = {\n          id: uuidv4(),\n          text: e.target.value,\n          done: false\n        }\n        setTodos([...todos, newTodo]);\n        // addTodoToStore(todo);\n        e.target.value = ''\n      }\n    }),\n    deleteTodo : id => {\n      const newTodoList = [...todos];\n      const todoToDel = newTodoList.find(todo => todo.id === id);\n      const index = newTodoList.indexOf(todoToDel);\n      newTodoList.splice(index, 1);\n      setTodos(newTodoList);\n    },\n    markDone: id => {\n      const newTodoList = [...todos];\n      const el = newTodoList.find(todo => todo.id == id);\n      const index = newTodoList.indexOf(el);\n      newTodoList[index].done = !newTodoList[index].done;\n      setTodos(newTodoList);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"todoheader\">\n                todos\n            </div>\n      <TodoList todoOperations={todoOperations} todos={todos}/>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nexport default function useStickyState (defaultValue, key) {\r\n        const [value, setValue] = React.useState(() => {\r\n            const stickyValue = window.localStorage.getItem(key);\r\n            return stickyValue !== null\r\n                ? JSON.parse(stickyValue)\r\n                : defaultValue;\r\n        });\r\n        React.useEffect(() => {\r\n            window.localStorage.setItem(key, JSON.stringify(value));\r\n        }, [key, value]);\r\n        return [value, setValue];\r\n    }\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}